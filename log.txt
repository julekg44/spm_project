26/08:

Risolto sequenziale con vettore dedicato alla next iteration ed una per la current iteration
Usare matrice e vettori nel codice come 'default'
Create funzioni per vettori e matrici random

29/08:
TODO: pulire poi sequenziale
TODO: aggiungere codice per prendere il tempo d'esecuzione da inizio a fine del set

-speedup, efficiency e scalability

Inzio versione thread
Spostato printArray con vector in util.h

Prendi l'array, dividi in n parti dove n Ã¨ il numero di thread dove ognuno lavora sulla sua parte
Ed alla fine lo sincronizzi con una barriera

TODO: FARE UNA FUNCTION PRINTMS()
fatto: FARE UNA FUNCTION PRINTMS()

METTI IL CRONOMETRAGGIO STESSO NEL BODY DEL THREAD 

TODO: HO USATO TUTTO DI DIMENSIONE FISSATA QUINDI POI MODIFICARE SENZA SPECIFICARE N_LENGHT NELLE FUNZIONI

31/08:
	segna quello che ha detto denny
	prova ad implementarlo ad cazzum
	vedi video c++
	capisci come funziona barrier
	IMPLEMENTA BENE:
			-

TODO: fare funzione che setta matrice e vettori di default
TODO: fare argv[] che prende il numero di thread da riga

TODO: sistemare funzioni di default,

[RISOLTO]Problema sulle iterazioni, con 1 funziona, su 2 si rompe 
--
FINITO THREAD, INIZIATO FAST FLOW
TODO: SISTEMARE CON MATRICE RANDOM E SCEGLIERE I CASI